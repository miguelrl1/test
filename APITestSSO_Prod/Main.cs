/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘APITestSSO_Prod.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir98 = null;
        public BindDirection bind_dir99 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity27 = null;
        public BindDirection bind_dir100 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity27_Policy = null;
        public BindDirection bind_dir101 = null;
        public BindDirection bind_dir102 = null;
        public BindDirection bind_dir103 = null;
        public BindDirection bind_dir104 = null;
        public BindDirection bind_dir105 = null;
        public BindDirection bind_dir106 = null;
        public BindDirection bind_dir107 = null;
        public BindDirection bind_dir108 = null;
        public BindDirection bind_dir109 = null;
        public BindDirection bind_dir110 = null;
        public BindDirection bind_dir111 = null;
        public BindDirection bind_dir112 = null;
        public BindDirection bind_dir113 = null;
        public BindDirection bind_dir114 = null;
        public BindDirection bind_dir115 = null;
        public BindDirection bind_dir116 = null;
        public BindDirection bind_dir117 = null;
        public BindDirection bind_dir118 = null;
        public BindDirection bind_dir119 = null;
        public BindDirection bind_dir120 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity23 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity23");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity25 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity25");
            _flow.DataExporterCloseActivity26 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity26");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity24 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity24");
            this.DataCursorActivity27 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity27");
            this.DataCursorActivity27_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence22 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence22");
            _flow.RESTActivityV28 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV28Input,RESTActivityV28Output>(_context,"RESTActivityV28");
            _flow.IfElse16 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse16Input>(_context,"IfElse16");
            _flow.RESTActivityV212 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV212Input,RESTActivityV212Output>(_context,"RESTActivityV212");
            _flow.IfElse19 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse19Input>(_context,"IfElse19");
            _flow.IfElseBranch17 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch17");
            _flow.IfElseBranch18 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch18");
            _flow.IfElseBranch20 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch20");
            _flow.IfElseBranch21 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch21");
            _flow.RESTActivityV29 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV29Input,RESTActivityV29Output>(_context,"RESTActivityV29");
            _flow.RESTActivityV210 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV210Input,RESTActivityV210Output>(_context,"RESTActivityV210");
            _flow.RESTActivityV211 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV211Input,RESTActivityV211Output>(_context,"RESTActivityV211");
            _flow.RESTActivityV215 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV215Input,RESTActivityV215Output>(_context,"RESTActivityV215");
            _flow.RESTActivityV213 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV213Input,RESTActivityV213Output>(_context,"RESTActivityV213");
            _flow.RESTActivityV214 = new HP.ST.Ext.RestActivity.RESTActivityV2<RESTActivityV214Input,RESTActivityV214Output>(_context,"RESTActivityV214");
            _flow.DataFetchActivity23.Comment = @"";
            _flow.DataFetchActivity23.IconPath = @"";
            _flow.DataFetchActivity23.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity23.QueryClassName = @"HP.ST.Ext.CustomDataProviders.LocalDataQuery";
            XmlDocument DataFetchActivity23_QueryParameters_Document = new XmlDocument();
            DataFetchActivity23_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity23Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>4fed8f9f-d79c-49cf-97b4-3a3b53cd5107</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>Users</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value></Value></QueryParameter><QueryParameter><Name>TableStructure</Name><Value>idUser,String,|password,String,</Value></QueryParameter><QueryParameter><Name>TableContents</Name><Value>l1080178@mvrht.net|Test1234$</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity23_QueryParameters_Document.LoadXml(xmlDataFetchActivity23Params);
            _flow.DataFetchActivity23.QueryParameters = DataFetchActivity23_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("Users", _flow.DataFetchActivity23);
            this.Activities.Add (_flow.DataFetchActivity23);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"SSO_Test";
            _flow.Loop2.Activities.Add (this.DataCursorActivity27);
            _flow.Loop2.Activities.Add (_flow.Sequence22);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity25.Comment = @"";
            _flow.DataExporterActivity25.IconPath = @"";
            VTDPropertyInfoBase pi199 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter102 = new VTDObjectGetter(pi199);
            VTDPropertyInfoBase pi200 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter98 = new VTDObjectSetter(pi200);
            binding_setter98 = new StringFormaterDecorator(binding_setter98,"{Step.DataFetchActivity23.OutTable}");
            bind_dir98 = new BindDirection(_flow.DataFetchActivity23,binding_getter102,binding_setter98,BindTargetType.ToInProperty);
            _flow.DataExporterActivity25.InDirections.Add(bind_dir98);
            this.Activities.Add (_flow.DataExporterActivity25);
            _flow.DataExporterCloseActivity26.Comment = @"";
            _flow.DataExporterCloseActivity26.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity26);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity24.Comment = @"";
            _flow.DataDisconnectActivity24.IconPath = @"";
            VTDPropertyInfoBase pi201 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter103 = new VTDObjectGetter(pi201);
            VTDPropertyInfoBase pi202 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter99 = new VTDObjectSetter(pi202);
            binding_setter99 = new StringFormaterDecorator(binding_setter99,"{Step.DataFetchActivity23.OutTable}");
            bind_dir99 = new BindDirection(_flow.DataFetchActivity23,binding_getter103,binding_setter99,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity24.InDirections.Add(bind_dir99);
            this.Activities.Add (_flow.DataDisconnectActivity24);
            this.DataCursorActivity27.Comment = @"";
            this.DataCursorActivity27.IconPath = @"";
            VTDPropertyInfoBase pi203 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter104 = new VTDObjectGetter(pi203);
            VTDPropertyInfoBase pi204 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter100 = new VTDObjectSetter(pi204);
            binding_setter100 = new StringFormaterDecorator(binding_setter100,"{Step.DataFetchActivity23.OutTable}");
            bind_dir100 = new BindDirection(_flow.DataFetchActivity23,binding_getter104,binding_setter100,BindTargetType.ToInProperty);
            this.DataCursorActivity27.InDirections.Add(bind_dir100);
            this.DataCursorActivity27_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity27_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity27_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity27_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity27_Policy.StartCondition.Value = "";
            this.DataCursorActivity27_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity27_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity27_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity27_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity27_Policy.EndCondition.Value = "";
            this.DataCursorActivity27_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity27_Policy.StepSize = 1;
            this.DataCursorActivity27_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity27.Policy = this.DataCursorActivity27_Policy;
            this.DataCursorActivity27.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity27.ResetCursor;
            _flow.Sequence22.Comment = @"";
            _flow.Sequence22.IconPath = @"";
            _flow.Sequence22.Name = @"Sequence22";
            _flow.Sequence22.Activities.Add (_flow.RESTActivityV28);
            _flow.Sequence22.Activities.Add (_flow.IfElse16);
            _flow.Sequence22.Activities.Add (_flow.RESTActivityV212);
            _flow.Sequence22.Activities.Add (_flow.IfElse19);
            _flow.RESTActivityV28.TextBody = @"";
            _flow.RESTActivityV28.TextXmlBody = @"";
            _flow.RESTActivityV28.FileBody = @"";
            _flow.RESTActivityV28.PostBody = @"";
            _flow.RESTActivityV28.Url = @"http://192.168.100.13:8000/token?grant_type=password&username={Step.RESTInputProperties.RESTActivityV28.idUser}&password={Step.RESTInputProperties.RESTActivityV28.password}&Connection=close";
            _flow.RESTActivityV28.HttpMethod = @"POST";
            _flow.RESTActivityV28.HttpVersion = @"1.1";
            _flow.RESTActivityV28.RequestHeaders = new Pair<string, string>[1];
            _flow.RESTActivityV28.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV28.RequestHeaders[0].Key = @"Autorization";
            _flow.RESTActivityV28.RequestHeaders[0].Value = @"Basic Y21zOnNXVXNhRDZVc3BFc3BBaGVkZXc=";
            _flow.RESTActivityV28.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV28.Input.password = @"{DataSource.Users.password}";
            _flow.RESTActivityV28.Comment = @"";
            _flow.RESTActivityV28.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV28.RequestBodyType = @"Text";
            _flow.RESTActivityV28.ResponseType = @"Json";
            _flow.RESTActivityV28.Name = @"Token_SSO_1st";
            _flow.RESTActivityV28.Proxy.Server = @"";
            _flow.RESTActivityV28.Proxy.Username = @"";
            _flow.RESTActivityV28.Proxy.Password = @"";
            _flow.RESTActivityV28.Authentication.Username = @"HPTest";
            _flow.RESTActivityV28.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV28.Authentication.PreemptiveAuthentication = true;
            _flow.RESTActivityV28.ConnectionType = @"Close";
            _flow.RESTActivityV28.Timeout = (int)100000;
            _flow.RESTActivityV28.ClientCertificate.Password = @"";
            _flow.RESTActivityV28.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV28.UseClientCertificate = false;
            _flow.RESTActivityV28.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV28.AllowRedirections = true;
            _flow.RESTActivityV28.ReuseCookies = false;
            _flow.RESTActivityV28.ExpectServerError = false;
            _flow.RESTActivityV28.HanaRequest = false;
            XmlDocument RESTActivityV28_XMLBody_Document = new XmlDocument();
            RESTActivityV28_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV28_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV28.XMLBody = RESTActivityV28_XMLBody_Document;
            XmlDocument RESTActivityV28_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV28_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV28_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV28.RequestMultipartInfoXml = RESTActivityV28_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV28.Multipart=false;
            _flow.RESTActivityV28.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV28.Input.password = @"{DataSource.Users.password}";
            _flow.RESTActivityV28.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV28.Input.password = @"{DataSource.Users.password}";
            VTDPropertyInfoBase pi205 = new VTDPropertyInfoBase("password");
            VTDBaseGetter binding_getter105 = new VTDObjectGetter(pi205);
            VTDPropertyInfoBase pi206 = new VTDPropertyInfoBase("Input.password");
            VTDBaseSetter binding_setter101 = new VTDObjectSetter(pi206);
            binding_setter101 = new StringFormaterDecorator(binding_setter101,"{DataSource.Users.password}");
            bind_dir101 = new BindDirection(this.DataCursorActivity27,binding_getter105,binding_setter101,BindTargetType.ToInProperty);
            _flow.RESTActivityV28.InDirections.Add(bind_dir101);
            VTDPropertyInfoBase pi207 = new VTDPropertyInfoBase("idUser");
            VTDBaseGetter binding_getter106 = new VTDObjectGetter(pi207);
            VTDPropertyInfoBase pi208 = new VTDPropertyInfoBase("Input.idUser");
            VTDBaseSetter binding_setter102 = new VTDObjectSetter(pi208);
            binding_setter102 = new StringFormaterDecorator(binding_setter102,"{DataSource.Users.idUser}");
            bind_dir102 = new BindDirection(this.DataCursorActivity27,binding_getter106,binding_setter102,BindTargetType.ToInProperty);
            _flow.RESTActivityV28.InDirections.Add(bind_dir102);
            VTDPropertyInfoBase pi209 = new VTDPropertyInfoBase("Input.idUser");
            VTDBaseGetter binding_getter107 = new VTDObjectGetter(pi209);
            VTDPropertyInfoBase pi210 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter103 = new VTDObjectSetter(pi210);
            binding_setter103 = new StringFormaterDecorator(binding_setter103,"{Step.RESTInputProperties.RESTActivityV28.idUser}");
            bind_dir103 = new BindDirection(_flow.RESTActivityV28,binding_getter107,binding_setter103,BindTargetType.ToInProperty);
            _flow.RESTActivityV28.InDirections.Add(bind_dir103);
            VTDPropertyInfoBase pi211 = new VTDPropertyInfoBase("Input.password");
            VTDBaseGetter binding_getter108 = new VTDObjectGetter(pi211);
            VTDPropertyInfoBase pi212 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter104 = new VTDObjectSetter(pi212);
            binding_setter104 = new StringFormaterDecorator(binding_setter104,"{Step.RESTInputProperties.RESTActivityV28.password}");
            bind_dir104 = new BindDirection(_flow.RESTActivityV28,binding_getter108,binding_setter104,BindTargetType.ToInProperty);
            _flow.RESTActivityV28.InDirections.Add(bind_dir104);
            XmlDocument RESTActivityV28_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV28_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV28_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV28.ExpectedResponseXmlBody = RESTActivityV28_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV28_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV28_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV28_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><access_token jsonType=""String"">stlq6h58i55prp3tj3ml0ij09kpm91vgrhofe82ill4d7lsnopk</access_token><token_type jsonType=""String"">bearer</token_type><id_token jsonType=""String"">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiNG9kcTBqNzBuZW50Y2NuNnVwMDkyM2QyMTgifQ.5-mXUxME0fUCnxoTfl3l4cRa6e_V0RGzuHRjbVB10-c</id_token><expires_in jsonType=""String"">1505935346</expires_in><refresh_token jsonType=""String"">1ck5fpsvhlnjugf1qhr2rjfphc5tamluc76ouelihqas47avqkdf</refresh_token></Object>");
            _flow.RESTActivityV28.ExpectedResponseJsonBody = RESTActivityV28_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV28_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV28_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV28_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV28.ExpectedOutputProperties = RESTActivityV28_ExpectedOutputProperties_Document;
            set_RESTActivityV28_checkpoints(_flow.RESTActivityV28);
            _flow.IfElse16.ConditionAsString = @"{Step.OutputProperties.RESTActivityV28.StatusCode} Equal 200";
            _flow.IfElse16.Comment = @"";
            _flow.IfElse16.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse16.Name = @"Token_1st_OK?";
            _flow.IfElse16.Activities.Add (_flow.IfElseBranch17);
            _flow.IfElse16.Activities.Add (_flow.IfElseBranch18);
            _flow.RESTActivityV212.TextBody = @"";
            _flow.RESTActivityV212.TextXmlBody = @"";
            _flow.RESTActivityV212.FileBody = @"";
            _flow.RESTActivityV212.PostBody = @"";
            _flow.RESTActivityV212.Url = @"http://192.168.100.14:8000/token?grant_type=password&username={Step.RESTInputProperties.RESTActivityV212.idUser}&password=Test1234$&Connection=close";
            _flow.RESTActivityV212.HttpMethod = @"POST";
            _flow.RESTActivityV212.HttpVersion = @"1.1";
            _flow.RESTActivityV212.RequestHeaders = new Pair<string, string>[1];
            _flow.RESTActivityV212.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV212.RequestHeaders[0].Key = @"Autorization";
            _flow.RESTActivityV212.RequestHeaders[0].Value = @"Basic Y21zOnNXVXNhRDZVc3BFc3BBaGVkZXc=";
            _flow.RESTActivityV212.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV212.Input.password = @"{DataSource.Users.password}";
            _flow.RESTActivityV212.Comment = @"";
            _flow.RESTActivityV212.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV212.RequestBodyType = @"Text";
            _flow.RESTActivityV212.ResponseType = @"Json";
            _flow.RESTActivityV212.Name = @"Token_SSO_2nd";
            _flow.RESTActivityV212.Proxy.Server = @"";
            _flow.RESTActivityV212.Proxy.Username = @"";
            _flow.RESTActivityV212.Proxy.Password = @"";
            _flow.RESTActivityV212.Authentication.Username = @"HPTest";
            _flow.RESTActivityV212.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV212.Authentication.PreemptiveAuthentication = true;
            _flow.RESTActivityV212.ConnectionType = @"Close";
            _flow.RESTActivityV212.Timeout = (int)100000;
            _flow.RESTActivityV212.ClientCertificate.Password = @"";
            _flow.RESTActivityV212.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV212.UseClientCertificate = false;
            _flow.RESTActivityV212.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV212.AllowRedirections = true;
            _flow.RESTActivityV212.ReuseCookies = false;
            _flow.RESTActivityV212.ExpectServerError = false;
            _flow.RESTActivityV212.HanaRequest = false;
            XmlDocument RESTActivityV212_XMLBody_Document = new XmlDocument();
            RESTActivityV212_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV212_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV212.XMLBody = RESTActivityV212_XMLBody_Document;
            XmlDocument RESTActivityV212_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV212_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV212_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV212.RequestMultipartInfoXml = RESTActivityV212_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV212.Multipart=false;
            _flow.RESTActivityV212.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV212.Input.password = @"{DataSource.Users.password}";
            _flow.RESTActivityV212.Input.idUser = @"{DataSource.Users.idUser}";
            _flow.RESTActivityV212.Input.password = @"{DataSource.Users.password}";
            VTDPropertyInfoBase pi213 = new VTDPropertyInfoBase("password");
            VTDBaseGetter binding_getter109 = new VTDObjectGetter(pi213);
            VTDPropertyInfoBase pi214 = new VTDPropertyInfoBase("Input.password");
            VTDBaseSetter binding_setter105 = new VTDObjectSetter(pi214);
            binding_setter105 = new StringFormaterDecorator(binding_setter105,"{DataSource.Users.password}");
            bind_dir105 = new BindDirection(this.DataCursorActivity27,binding_getter109,binding_setter105,BindTargetType.ToInProperty);
            _flow.RESTActivityV212.InDirections.Add(bind_dir105);
            VTDPropertyInfoBase pi215 = new VTDPropertyInfoBase("idUser");
            VTDBaseGetter binding_getter110 = new VTDObjectGetter(pi215);
            VTDPropertyInfoBase pi216 = new VTDPropertyInfoBase("Input.idUser");
            VTDBaseSetter binding_setter106 = new VTDObjectSetter(pi216);
            binding_setter106 = new StringFormaterDecorator(binding_setter106,"{DataSource.Users.idUser}");
            bind_dir106 = new BindDirection(this.DataCursorActivity27,binding_getter110,binding_setter106,BindTargetType.ToInProperty);
            _flow.RESTActivityV212.InDirections.Add(bind_dir106);
            VTDPropertyInfoBase pi217 = new VTDPropertyInfoBase("Input.idUser");
            VTDBaseGetter binding_getter111 = new VTDObjectGetter(pi217);
            VTDPropertyInfoBase pi218 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter107 = new VTDObjectSetter(pi218);
            binding_setter107 = new StringFormaterDecorator(binding_setter107,"{Step.RESTInputProperties.RESTActivityV212.idUser}");
            bind_dir107 = new BindDirection(_flow.RESTActivityV212,binding_getter111,binding_setter107,BindTargetType.ToInProperty);
            _flow.RESTActivityV212.InDirections.Add(bind_dir107);
            XmlDocument RESTActivityV212_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV212_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV212_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV212.ExpectedResponseXmlBody = RESTActivityV212_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV212_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV212_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV212_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><access_token jsonType=""String"">5n3av5j223ul2h4kvdhktjoejke0v9l0d2ue9lt2fec6v3rad9o</access_token><token_type jsonType=""String"">bearer</token_type><id_token jsonType=""String"">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiNjY2b2VoZXEwdmNkZDNsM25oY3Q3ZWlxYTIifQ.DfWfsUdRdHwLnVNuuYIbGquGPDr_X399phRO52SyoDQ</id_token><expires_in jsonType=""String"">1497980901</expires_in><refresh_token jsonType=""String"">d72m1201m1mojol0pf682j2a6q39bgpd4p85e5smlak0uorven6</refresh_token></Object>");
            _flow.RESTActivityV212.ExpectedResponseJsonBody = RESTActivityV212_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV212_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV212_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV212_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV212.ExpectedOutputProperties = RESTActivityV212_ExpectedOutputProperties_Document;
            set_RESTActivityV212_checkpoints(_flow.RESTActivityV212);
            _flow.IfElse19.ConditionAsString = @"{Step.OutputProperties.RESTActivityV212.StatusCode} Equal 200";
            _flow.IfElse19.Comment = @"";
            _flow.IfElse19.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse19.Name = @"Token_2nd _Ok?";
            _flow.IfElse19.Activities.Add (_flow.IfElseBranch20);
            _flow.IfElse19.Activities.Add (_flow.IfElseBranch21);
            _flow.IfElseBranch17.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi219 = new VTDPropertyInfoBase("StatusCode");
            VTDBaseGetter binding_getter112 = new VTDObjectGetter(pi219);
            		System.Int32 expr00 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.RESTActivityV28.GetParam(binding_getter112),typeof(System.Int32));
            		var result0 = expr00;
            		System.Int32 result1 = (System.Int32)(200);
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch17.Comment = @"";
            _flow.IfElseBranch17.IconPath = @"";
            _flow.IfElseBranch17.Name = @"Yes";
            _flow.IfElseBranch17.Activities.Add (_flow.RESTActivityV29);
            _flow.IfElseBranch17.Activities.Add (_flow.RESTActivityV210);
            _flow.IfElseBranch17.Activities.Add (_flow.RESTActivityV211);
            _flow.IfElseBranch18.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch18.Comment = @"";
            _flow.IfElseBranch18.IconPath = @"";
            _flow.IfElseBranch18.Name = @"No";
            _flow.IfElseBranch20.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi220 = new VTDPropertyInfoBase("StatusCode");
            VTDBaseGetter binding_getter113 = new VTDObjectGetter(pi220);
            		System.Int32 expr00 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.RESTActivityV212.GetParam(binding_getter113),typeof(System.Int32));
            		var result0 = expr00;
            		System.Int32 result1 = (System.Int32)(200);
            		return (result0 == result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch20.Comment = @"";
            _flow.IfElseBranch20.IconPath = @"";
            _flow.IfElseBranch20.Name = @"Yes";
            _flow.IfElseBranch20.Activities.Add (_flow.RESTActivityV215);
            _flow.IfElseBranch20.Activities.Add (_flow.RESTActivityV213);
            _flow.IfElseBranch20.Activities.Add (_flow.RESTActivityV214);
            _flow.IfElseBranch21.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch21.Comment = @"";
            _flow.IfElseBranch21.IconPath = @"";
            _flow.IfElseBranch21.Name = @"No";
            _flow.RESTActivityV29.TextBody = @"";
            _flow.RESTActivityV29.TextXmlBody = @"";
            _flow.RESTActivityV29.FileBody = @"";
            _flow.RESTActivityV29.PostBody = @"";
            _flow.RESTActivityV29.Url = @"http://192.168.100.13:8000/userinfo";
            _flow.RESTActivityV29.HttpMethod = @"POST";
            _flow.RESTActivityV29.HttpVersion = @"1.1";
            _flow.RESTActivityV29.RequestHeaders = new Pair<string, string>[2];
            _flow.RESTActivityV29.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV29.RequestHeaders[0].Key = @"Authorization";
            _flow.RESTActivityV29.RequestHeaders[0].Value = @"bearer {Step.RESTInputProperties.RESTActivityV29.Token}";
            _flow.RESTActivityV29.RequestHeaders[1] = new Pair<string, string>();
            _flow.RESTActivityV29.RequestHeaders[1].Key = @"ClientAuthKey";
            _flow.RESTActivityV29.RequestHeaders[1].Value = @"Yz1/2hc=z0+R//H7Es=QVxKf2+t=/NVO";
            _flow.RESTActivityV29.Input.Token = @"{Step.ResponseJsonBody.RESTActivityV28.access_token}";
            _flow.RESTActivityV29.Comment = @"";
            _flow.RESTActivityV29.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV29.RequestBodyType = @"Text";
            _flow.RESTActivityV29.ResponseType = @"Text";
            _flow.RESTActivityV29.Name = @"UserInfo_SSO_1st";
            _flow.RESTActivityV29.Proxy.Server = @"";
            _flow.RESTActivityV29.Proxy.Username = @"";
            _flow.RESTActivityV29.Proxy.Password = @"";
            _flow.RESTActivityV29.Authentication.Username = @"";
            _flow.RESTActivityV29.Authentication.Password = @"";
            _flow.RESTActivityV29.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV29.ConnectionType = @"Close";
            _flow.RESTActivityV29.Timeout = (int)100000;
            _flow.RESTActivityV29.ClientCertificate.Password = @"";
            _flow.RESTActivityV29.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV29.UseClientCertificate = false;
            _flow.RESTActivityV29.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV29.AllowRedirections = true;
            _flow.RESTActivityV29.ReuseCookies = false;
            _flow.RESTActivityV29.ExpectServerError = false;
            _flow.RESTActivityV29.HanaRequest = false;
            XmlDocument RESTActivityV29_XMLBody_Document = new XmlDocument();
            RESTActivityV29_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV29_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV29.XMLBody = RESTActivityV29_XMLBody_Document;
            XmlDocument RESTActivityV29_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV29_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV29_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV29.RequestMultipartInfoXml = RESTActivityV29_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV29.Multipart=false;
            _flow.RESTActivityV29.Input.Token = @"{Step.ResponseJsonBody.RESTActivityV28.access_token}";
            _flow.RESTActivityV29.Input.Token = @"{Step.ResponseJsonBody.RESTActivityV28.access_token}";
            VTDPropertyInfoBase pi221 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter114 = new VTDJsonGetter(pi221);
            VTDPropertyInfoBase pi222 = new VTDPropertyInfoBase("Input.Token");
            VTDBaseSetter binding_setter108 = new VTDObjectSetter(pi222);
            binding_setter108 = new StringFormaterDecorator(binding_setter108,"{Step.ResponseJsonBody.RESTActivityV28.access_token}");
            bind_dir108 = new BindDirection(_flow.RESTActivityV28,binding_getter114,binding_setter108,BindTargetType.ToInProperty);
            _flow.RESTActivityV29.InDirections.Add(bind_dir108);
            VTDPropertyInfoBase pi223 = new VTDPropertyInfoBase("Input.Token");
            VTDBaseGetter binding_getter115 = new VTDObjectGetter(pi223);
            VTDPropertyInfoBase pi224 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter109 = new VTDObjectSetter(pi224);
            binding_setter109 = new StringFormaterDecorator(binding_setter109,"{Step.RESTInputProperties.RESTActivityV29.Token}");
            bind_dir109 = new BindDirection(_flow.RESTActivityV29,binding_getter115,binding_setter109,BindTargetType.ToInProperty);
            _flow.RESTActivityV29.InDirections.Add(bind_dir109);
            XmlDocument RESTActivityV29_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV29_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV29_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV29.ExpectedResponseXmlBody = RESTActivityV29_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV29_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV29_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV29_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV29.ExpectedResponseJsonBody = RESTActivityV29_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV29_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV29_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV29_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV29.ExpectedOutputProperties = RESTActivityV29_ExpectedOutputProperties_Document;
            set_RESTActivityV29_checkpoints(_flow.RESTActivityV29);
            _flow.RESTActivityV210.TextBody = @"";
            _flow.RESTActivityV210.TextXmlBody = @"";
            _flow.RESTActivityV210.FileBody = @"";
            _flow.RESTActivityV210.PostBody = @"";
            _flow.RESTActivityV210.Url = @"http://192.168.100.13:8000/token?grant_type=refresh_token&scope=openid%20profile&refresh_token={Step.RESTInputProperties.RESTActivityV210.refresh_token}&Authorization=Basic Y21zOnNXVXNhRDZVc3BFc3BBaGVkZXc=";
            _flow.RESTActivityV210.HttpMethod = @"POST";
            _flow.RESTActivityV210.HttpVersion = @"1.1";
            _flow.RESTActivityV210.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV28.refresh_token}";
            _flow.RESTActivityV210.Comment = @"";
            _flow.RESTActivityV210.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV210.RequestBodyType = @"PostForm";
            _flow.RESTActivityV210.ResponseType = @"Json";
            _flow.RESTActivityV210.Name = @"RefreshToken_SSO_1st";
            _flow.RESTActivityV210.Proxy.Server = @"";
            _flow.RESTActivityV210.Proxy.Username = @"";
            _flow.RESTActivityV210.Proxy.Password = @"";
            _flow.RESTActivityV210.Authentication.Username = @"HPTest";
            _flow.RESTActivityV210.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV210.Authentication.PreemptiveAuthentication = true;
            _flow.RESTActivityV210.ConnectionType = @"Close";
            _flow.RESTActivityV210.Timeout = (int)100000;
            _flow.RESTActivityV210.ClientCertificate.Password = @"";
            _flow.RESTActivityV210.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV210.UseClientCertificate = false;
            _flow.RESTActivityV210.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV210.AllowRedirections = true;
            _flow.RESTActivityV210.ReuseCookies = false;
            _flow.RESTActivityV210.ExpectServerError = false;
            _flow.RESTActivityV210.HanaRequest = false;
            XmlDocument RESTActivityV210_XMLBody_Document = new XmlDocument();
            RESTActivityV210_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV210_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV210.XMLBody = RESTActivityV210_XMLBody_Document;
            XmlDocument RESTActivityV210_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV210_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV210_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV210.RequestMultipartInfoXml = RESTActivityV210_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV210.Multipart=false;
            _flow.RESTActivityV210.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV28.refresh_token}";
            _flow.RESTActivityV210.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV28.refresh_token}";
            VTDPropertyInfoBase pi225 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='refresh_token'][1]");
            VTDBaseGetter binding_getter116 = new VTDJsonGetter(pi225);
            VTDPropertyInfoBase pi226 = new VTDPropertyInfoBase("Input.refresh_token");
            VTDBaseSetter binding_setter110 = new VTDObjectSetter(pi226);
            binding_setter110 = new StringFormaterDecorator(binding_setter110,"{Step.ResponseJsonBody.RESTActivityV28.refresh_token}");
            bind_dir110 = new BindDirection(_flow.RESTActivityV28,binding_getter116,binding_setter110,BindTargetType.ToInProperty);
            _flow.RESTActivityV210.InDirections.Add(bind_dir110);
            VTDPropertyInfoBase pi227 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='refresh_token'][1]");
            VTDBaseGetter binding_getter117 = new VTDJsonGetter(pi227);
            VTDPropertyInfoBase pi228 = new VTDPropertyInfoBase("Input.refresh_token");
            VTDBaseSetter binding_setter111 = new VTDObjectSetter(pi228);
            binding_setter111 = new StringFormaterDecorator(binding_setter111,"{Step.ResponseJsonBody.RESTActivityV28.refresh_token}");
            bind_dir111 = new BindDirection(_flow.RESTActivityV28,binding_getter117,binding_setter111,BindTargetType.ToInProperty);
            _flow.RESTActivityV210.InDirections.Add(bind_dir111);
            VTDPropertyInfoBase pi229 = new VTDPropertyInfoBase("Input.refresh_token");
            VTDBaseGetter binding_getter118 = new VTDObjectGetter(pi229);
            VTDPropertyInfoBase pi230 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter112 = new VTDObjectSetter(pi230);
            binding_setter112 = new StringFormaterDecorator(binding_setter112,"{Step.RESTInputProperties.RESTActivityV210.refresh_token}");
            bind_dir112 = new BindDirection(_flow.RESTActivityV210,binding_getter118,binding_setter112,BindTargetType.ToInProperty);
            _flow.RESTActivityV210.InDirections.Add(bind_dir112);
            XmlDocument RESTActivityV210_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV210_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV210_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV210.ExpectedResponseXmlBody = RESTActivityV210_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV210_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV210_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV210_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><access_token jsonType=""String"">5n3av5j223ul2h4kvdhktjoejke0v9l0d2ue9lt2fec6v3rad9o</access_token><token_type jsonType=""String"">bearer</token_type><id_token jsonType=""String"">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiNjY2b2VoZXEwdmNkZDNsM25oY3Q3ZWlxYTIifQ.DfWfsUdRdHwLnVNuuYIbGquGPDr_X399phRO52SyoDQ</id_token><expires_in jsonType=""String"">1497980901</expires_in><refresh_token jsonType=""String"">d72m1201m1mojol0pf682j2a6q39bgpd4p85e5smlak0uorven6</refresh_token></Object>");
            _flow.RESTActivityV210.ExpectedResponseJsonBody = RESTActivityV210_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV210_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV210_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV210_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV210.ExpectedOutputProperties = RESTActivityV210_ExpectedOutputProperties_Document;
            set_RESTActivityV210_checkpoints(_flow.RESTActivityV210);
            _flow.RESTActivityV211.TextBody = @"";
            _flow.RESTActivityV211.TextXmlBody = @"";
            _flow.RESTActivityV211.FileBody = @"";
            _flow.RESTActivityV211.PostBody = @"";
            _flow.RESTActivityV211.Url = @"http://192.168.100.13:8000/logout?access_token={Step.RESTInputProperties.RESTActivityV211.access_token}&post_logout_redirect_uri=www.claro360.com";
            _flow.RESTActivityV211.HttpMethod = @"GET";
            _flow.RESTActivityV211.HttpVersion = @"1.1";
            _flow.RESTActivityV211.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV210.access_token}";
            _flow.RESTActivityV211.Comment = @"";
            _flow.RESTActivityV211.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV211.RequestBodyType = @"Text";
            _flow.RESTActivityV211.ResponseType = @"Text";
            _flow.RESTActivityV211.Name = @"Logout_SSO_1st";
            _flow.RESTActivityV211.Proxy.Server = @"";
            _flow.RESTActivityV211.Proxy.Username = @"";
            _flow.RESTActivityV211.Proxy.Password = @"";
            _flow.RESTActivityV211.Authentication.Username = @"HPTest";
            _flow.RESTActivityV211.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV211.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV211.ConnectionType = @"Close";
            _flow.RESTActivityV211.Timeout = (int)100000;
            _flow.RESTActivityV211.ClientCertificate.Password = @"";
            _flow.RESTActivityV211.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV211.UseClientCertificate = false;
            _flow.RESTActivityV211.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV211.AllowRedirections = true;
            _flow.RESTActivityV211.ReuseCookies = false;
            _flow.RESTActivityV211.ExpectServerError = false;
            _flow.RESTActivityV211.HanaRequest = false;
            XmlDocument RESTActivityV211_XMLBody_Document = new XmlDocument();
            RESTActivityV211_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV211_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV211.XMLBody = RESTActivityV211_XMLBody_Document;
            XmlDocument RESTActivityV211_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV211_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV211_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV211.RequestMultipartInfoXml = RESTActivityV211_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV211.Multipart=false;
            _flow.RESTActivityV211.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV210.access_token}";
            _flow.RESTActivityV211.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV210.access_token}";
            VTDPropertyInfoBase pi231 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter119 = new VTDJsonGetter(pi231);
            VTDPropertyInfoBase pi232 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseSetter binding_setter113 = new VTDObjectSetter(pi232);
            binding_setter113 = new StringFormaterDecorator(binding_setter113,"{Step.ResponseJsonBody.RESTActivityV210.access_token}");
            bind_dir113 = new BindDirection(_flow.RESTActivityV210,binding_getter119,binding_setter113,BindTargetType.ToInProperty);
            _flow.RESTActivityV211.InDirections.Add(bind_dir113);
            VTDPropertyInfoBase pi233 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseGetter binding_getter120 = new VTDObjectGetter(pi233);
            VTDPropertyInfoBase pi234 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter114 = new VTDObjectSetter(pi234);
            binding_setter114 = new StringFormaterDecorator(binding_setter114,"{Step.RESTInputProperties.RESTActivityV211.access_token}");
            bind_dir114 = new BindDirection(_flow.RESTActivityV211,binding_getter120,binding_setter114,BindTargetType.ToInProperty);
            _flow.RESTActivityV211.InDirections.Add(bind_dir114);
            XmlDocument RESTActivityV211_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV211_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV211_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV211.ExpectedResponseXmlBody = RESTActivityV211_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV211_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV211_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV211_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV211.ExpectedResponseJsonBody = RESTActivityV211_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV211_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV211_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV211_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV211.ExpectedOutputProperties = RESTActivityV211_ExpectedOutputProperties_Document;
            set_RESTActivityV211_checkpoints(_flow.RESTActivityV211);
            _flow.RESTActivityV215.TextBody = @"";
            _flow.RESTActivityV215.TextXmlBody = @"";
            _flow.RESTActivityV215.FileBody = @"";
            _flow.RESTActivityV215.PostBody = @"";
            _flow.RESTActivityV215.Url = @"http://192.168.100.14:8000/userinfo";
            _flow.RESTActivityV215.HttpMethod = @"GET";
            _flow.RESTActivityV215.HttpVersion = @"1.1";
            _flow.RESTActivityV215.RequestHeaders = new Pair<string, string>[2];
            _flow.RESTActivityV215.RequestHeaders[0] = new Pair<string, string>();
            _flow.RESTActivityV215.RequestHeaders[0].Key = @"Authorization";
            _flow.RESTActivityV215.RequestHeaders[0].Value = @"bearer {Step.RESTInputProperties.RESTActivityV215.access_token}";
            _flow.RESTActivityV215.RequestHeaders[1] = new Pair<string, string>();
            _flow.RESTActivityV215.RequestHeaders[1].Key = @"ClientAuthKey";
            _flow.RESTActivityV215.RequestHeaders[1].Value = @"ClientAuthKey	Yz1/2hc=z0+R//H7Es=QVxKf2+t=/NVO";
            _flow.RESTActivityV215.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV212.access_token}";
            _flow.RESTActivityV215.Comment = @"";
            _flow.RESTActivityV215.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV215.RequestBodyType = @"Text";
            _flow.RESTActivityV215.ResponseType = @"Json";
            _flow.RESTActivityV215.Name = @"UserInfo_SSO_2nd";
            _flow.RESTActivityV215.Proxy.Server = @"";
            _flow.RESTActivityV215.Proxy.Username = @"";
            _flow.RESTActivityV215.Proxy.Password = @"";
            _flow.RESTActivityV215.Authentication.Username = @"HPTest";
            _flow.RESTActivityV215.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV215.Authentication.PreemptiveAuthentication = false;
            _flow.RESTActivityV215.ConnectionType = @"Close";
            _flow.RESTActivityV215.Timeout = (int)100000;
            _flow.RESTActivityV215.ClientCertificate.Password = @"";
            _flow.RESTActivityV215.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV215.UseClientCertificate = false;
            _flow.RESTActivityV215.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV215.AllowRedirections = true;
            _flow.RESTActivityV215.ReuseCookies = false;
            _flow.RESTActivityV215.ExpectServerError = false;
            _flow.RESTActivityV215.HanaRequest = false;
            XmlDocument RESTActivityV215_XMLBody_Document = new XmlDocument();
            RESTActivityV215_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV215_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV215.XMLBody = RESTActivityV215_XMLBody_Document;
            XmlDocument RESTActivityV215_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV215_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV215_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV215.RequestMultipartInfoXml = RESTActivityV215_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV215.Multipart=false;
            _flow.RESTActivityV215.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV212.access_token}";
            _flow.RESTActivityV215.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV212.access_token}";
            VTDPropertyInfoBase pi235 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter121 = new VTDJsonGetter(pi235);
            VTDPropertyInfoBase pi236 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseSetter binding_setter115 = new VTDObjectSetter(pi236);
            binding_setter115 = new StringFormaterDecorator(binding_setter115,"{Step.ResponseJsonBody.RESTActivityV212.access_token}");
            bind_dir115 = new BindDirection(_flow.RESTActivityV212,binding_getter121,binding_setter115,BindTargetType.ToInProperty);
            _flow.RESTActivityV215.InDirections.Add(bind_dir115);
            VTDPropertyInfoBase pi237 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseGetter binding_getter122 = new VTDObjectGetter(pi237);
            VTDPropertyInfoBase pi238 = new VTDPropertyInfoBase("RequestHeaders[0].Value");
            VTDBaseSetter binding_setter116 = new VTDObjectSetter(pi238);
            binding_setter116 = new StringFormaterDecorator(binding_setter116,"{Step.RESTInputProperties.RESTActivityV215.access_token}");
            bind_dir116 = new BindDirection(_flow.RESTActivityV215,binding_getter122,binding_setter116,BindTargetType.ToInProperty);
            _flow.RESTActivityV215.InDirections.Add(bind_dir116);
            XmlDocument RESTActivityV215_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV215_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV215.ExpectedResponseXmlBody = RESTActivityV215_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV215_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV215_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080></F6DA54ED-92F5-4c5c-9795-170905F25080>");
            _flow.RESTActivityV215.ExpectedResponseJsonBody = RESTActivityV215_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV215_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV215_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV215_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV215.ExpectedOutputProperties = RESTActivityV215_ExpectedOutputProperties_Document;
            set_RESTActivityV215_checkpoints(_flow.RESTActivityV215);
            _flow.RESTActivityV213.TextBody = @"";
            _flow.RESTActivityV213.TextXmlBody = @"";
            _flow.RESTActivityV213.FileBody = @"";
            _flow.RESTActivityV213.PostBody = @"";
            _flow.RESTActivityV213.Url = @"http://192.168.100.14:8000/token?grant_type=refresh_token&scope=openid%20profile&refresh_token={Step.RESTInputProperties.RESTActivityV213.refresh_token}&Authorization=Basic Y21zOnNXVXNhRDZVc3BFc3BBaGVkZXc=";
            _flow.RESTActivityV213.HttpMethod = @"POST";
            _flow.RESTActivityV213.HttpVersion = @"1.1";
            _flow.RESTActivityV213.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV212.refresh_token}";
            _flow.RESTActivityV213.Comment = @"";
            _flow.RESTActivityV213.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV213.RequestBodyType = @"PostForm";
            _flow.RESTActivityV213.ResponseType = @"Json";
            _flow.RESTActivityV213.Name = @"RefreshToken_SSO_2nd";
            _flow.RESTActivityV213.Proxy.Server = @"";
            _flow.RESTActivityV213.Proxy.Username = @"";
            _flow.RESTActivityV213.Proxy.Password = @"";
            _flow.RESTActivityV213.Authentication.Username = @"HPTest";
            _flow.RESTActivityV213.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV213.Authentication.PreemptiveAuthentication = true;
            _flow.RESTActivityV213.ConnectionType = @"Close";
            _flow.RESTActivityV213.Timeout = (int)100000;
            _flow.RESTActivityV213.ClientCertificate.Password = @"";
            _flow.RESTActivityV213.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV213.UseClientCertificate = false;
            _flow.RESTActivityV213.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV213.AllowRedirections = true;
            _flow.RESTActivityV213.ReuseCookies = false;
            _flow.RESTActivityV213.ExpectServerError = false;
            _flow.RESTActivityV213.HanaRequest = false;
            XmlDocument RESTActivityV213_XMLBody_Document = new XmlDocument();
            RESTActivityV213_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV213_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV213.XMLBody = RESTActivityV213_XMLBody_Document;
            XmlDocument RESTActivityV213_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV213_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV213_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV213.RequestMultipartInfoXml = RESTActivityV213_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV213.Multipart=false;
            _flow.RESTActivityV213.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV212.refresh_token}";
            _flow.RESTActivityV213.Input.refresh_token = @"{Step.ResponseJsonBody.RESTActivityV212.refresh_token}";
            VTDPropertyInfoBase pi239 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='refresh_token'][1]");
            VTDBaseGetter binding_getter123 = new VTDJsonGetter(pi239);
            VTDPropertyInfoBase pi240 = new VTDPropertyInfoBase("Input.refresh_token");
            VTDBaseSetter binding_setter117 = new VTDObjectSetter(pi240);
            binding_setter117 = new StringFormaterDecorator(binding_setter117,"{Step.ResponseJsonBody.RESTActivityV212.refresh_token}");
            bind_dir117 = new BindDirection(_flow.RESTActivityV212,binding_getter123,binding_setter117,BindTargetType.ToInProperty);
            _flow.RESTActivityV213.InDirections.Add(bind_dir117);
            VTDPropertyInfoBase pi241 = new VTDPropertyInfoBase("Input.refresh_token");
            VTDBaseGetter binding_getter124 = new VTDObjectGetter(pi241);
            VTDPropertyInfoBase pi242 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter118 = new VTDObjectSetter(pi242);
            binding_setter118 = new StringFormaterDecorator(binding_setter118,"{Step.RESTInputProperties.RESTActivityV213.refresh_token}");
            bind_dir118 = new BindDirection(_flow.RESTActivityV213,binding_getter124,binding_setter118,BindTargetType.ToInProperty);
            _flow.RESTActivityV213.InDirections.Add(bind_dir118);
            XmlDocument RESTActivityV213_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV213_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV213_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV213.ExpectedResponseXmlBody = RESTActivityV213_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV213_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV213_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV213_ExpectedResponseJsonBody_Document.LoadXml(
@"<Object jsonType=""Object"" isAnonymous=""true""><access_token jsonType=""String"">5n3av5j223ul2h4kvdhktjoejke0v9l0d2ue9lt2fec6v3rad9o</access_token><token_type jsonType=""String"">bearer</token_type><id_token jsonType=""String"">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZXNzaW9uX2lkIjoiNjY2b2VoZXEwdmNkZDNsM25oY3Q3ZWlxYTIifQ.DfWfsUdRdHwLnVNuuYIbGquGPDr_X399phRO52SyoDQ</id_token><expires_in jsonType=""String"">1497980901</expires_in><refresh_token jsonType=""String"">d72m1201m1mojol0pf682j2a6q39bgpd4p85e5smlak0uorven6</refresh_token></Object>");
            _flow.RESTActivityV213.ExpectedResponseJsonBody = RESTActivityV213_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV213_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV213_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV213_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV213.ExpectedOutputProperties = RESTActivityV213_ExpectedOutputProperties_Document;
            set_RESTActivityV213_checkpoints(_flow.RESTActivityV213);
            _flow.RESTActivityV214.TextBody = @"";
            _flow.RESTActivityV214.TextXmlBody = @"";
            _flow.RESTActivityV214.FileBody = @"";
            _flow.RESTActivityV214.PostBody = @"";
            _flow.RESTActivityV214.Url = @"http://192.168.100.14:8000/logout?access_token={Step.RESTInputProperties.RESTActivityV214.access_token}&post_logout_redirect_uri=www.claro360.com";
            _flow.RESTActivityV214.HttpMethod = @"POST";
            _flow.RESTActivityV214.HttpVersion = @"1.1";
            _flow.RESTActivityV214.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV213.access_token}";
            _flow.RESTActivityV214.Comment = @"";
            _flow.RESTActivityV214.IconPath = @"AddIns\ServiceTest\REST\ictb_REST_Method_16.png";
            _flow.RESTActivityV214.RequestBodyType = @"Text";
            _flow.RESTActivityV214.ResponseType = @"Text";
            _flow.RESTActivityV214.Name = @"Logout_SSO_2nd";
            _flow.RESTActivityV214.Proxy.Server = @"";
            _flow.RESTActivityV214.Proxy.Username = @"";
            _flow.RESTActivityV214.Proxy.Password = @"";
            _flow.RESTActivityV214.Authentication.Username = @"HPTest";
            _flow.RESTActivityV214.Authentication.Password = this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
            _flow.RESTActivityV214.Authentication.PreemptiveAuthentication = true;
            _flow.RESTActivityV214.ConnectionType = @"Close";
            _flow.RESTActivityV214.Timeout = (int)100000;
            _flow.RESTActivityV214.ClientCertificate.Password = @"";
            _flow.RESTActivityV214.ClientCertificate.FileSystem.Path = @"";
            _flow.RESTActivityV214.UseClientCertificate = false;
            _flow.RESTActivityV214.MaximumAutomaticRedirections = (int)3;
            _flow.RESTActivityV214.AllowRedirections = true;
            _flow.RESTActivityV214.ReuseCookies = false;
            _flow.RESTActivityV214.ExpectServerError = false;
            _flow.RESTActivityV214.HanaRequest = false;
            XmlDocument RESTActivityV214_XMLBody_Document = new XmlDocument();
            RESTActivityV214_XMLBody_Document.PreserveWhitespace = true;
            RESTActivityV214_XMLBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV214.XMLBody = RESTActivityV214_XMLBody_Document;
            XmlDocument RESTActivityV214_RequestMultipartInfoXml_Document = new XmlDocument();
            RESTActivityV214_RequestMultipartInfoXml_Document.PreserveWhitespace = true;
            RESTActivityV214_RequestMultipartInfoXml_Document.LoadXml(
@"<RequestMultipartInfo><Type>Related</Type></RequestMultipartInfo>");
            _flow.RESTActivityV214.RequestMultipartInfoXml = RESTActivityV214_RequestMultipartInfoXml_Document;
            _flow.RESTActivityV214.Multipart=false;
            _flow.RESTActivityV214.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV213.access_token}";
            _flow.RESTActivityV214.Input.access_token = @"{Step.ResponseJsonBody.RESTActivityV213.access_token}";
            VTDPropertyInfoBase pi243 = new VTDPropertyInfoBase("XMLResponse","/*[local-name(.)='Object'][1]/*[local-name(.)='access_token'][1]");
            VTDBaseGetter binding_getter125 = new VTDJsonGetter(pi243);
            VTDPropertyInfoBase pi244 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseSetter binding_setter119 = new VTDObjectSetter(pi244);
            binding_setter119 = new StringFormaterDecorator(binding_setter119,"{Step.ResponseJsonBody.RESTActivityV213.access_token}");
            bind_dir119 = new BindDirection(_flow.RESTActivityV213,binding_getter125,binding_setter119,BindTargetType.ToInProperty);
            _flow.RESTActivityV214.InDirections.Add(bind_dir119);
            VTDPropertyInfoBase pi245 = new VTDPropertyInfoBase("Input.access_token");
            VTDBaseGetter binding_getter126 = new VTDObjectGetter(pi245);
            VTDPropertyInfoBase pi246 = new VTDPropertyInfoBase("Url");
            VTDBaseSetter binding_setter120 = new VTDObjectSetter(pi246);
            binding_setter120 = new StringFormaterDecorator(binding_setter120,"{Step.RESTInputProperties.RESTActivityV214.access_token}");
            bind_dir120 = new BindDirection(_flow.RESTActivityV214,binding_getter126,binding_setter120,BindTargetType.ToInProperty);
            _flow.RESTActivityV214.InDirections.Add(bind_dir120);
            XmlDocument RESTActivityV214_ExpectedResponseXmlBody_Document = new XmlDocument();
            RESTActivityV214_ExpectedResponseXmlBody_Document.PreserveWhitespace = true;
            RESTActivityV214_ExpectedResponseXmlBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV214.ExpectedResponseXmlBody = RESTActivityV214_ExpectedResponseXmlBody_Document;
            XmlDocument RESTActivityV214_ExpectedResponseJsonBody_Document = new XmlDocument();
            RESTActivityV214_ExpectedResponseJsonBody_Document.PreserveWhitespace = true;
            RESTActivityV214_ExpectedResponseJsonBody_Document.LoadXml(
@"<F6DA54ED-92F5-4c5c-9795-170905F25080 />");
            _flow.RESTActivityV214.ExpectedResponseJsonBody = RESTActivityV214_ExpectedResponseJsonBody_Document;
            XmlDocument RESTActivityV214_ExpectedOutputProperties_Document = new XmlDocument();
            RESTActivityV214_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            RESTActivityV214_ExpectedOutputProperties_Document.LoadXml(
@"<Arguments><ResponseHttpVersion></ResponseHttpVersion><StatusCode>200</StatusCode><StatusDescription></StatusDescription><ResponseBody></ResponseBody><ResponseBodyAsBase64></ResponseBodyAsBase64></Arguments>");
            _flow.RESTActivityV214.ExpectedOutputProperties = RESTActivityV214_ExpectedOutputProperties_Document;
            set_RESTActivityV214_checkpoints(_flow.RESTActivityV214);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        	this._context.EncryptionMngr.Decrypt("kf6soQhLacZQdbeWgZYzbQ==");
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    